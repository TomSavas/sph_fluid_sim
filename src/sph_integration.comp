#version 430
layout(local_size_x = 1) in;

struct ParticleData
{
    vec4 posAndMass;
    vec4 velocity;
    vec4 props;
    vec4 force;
};

layout(std430, binding=0) buffer Particles
{
    ParticleData particles[];
};

uniform float timestep;
uniform vec3 gravity;

void main()
{
    uint index = gl_GlobalInvocationID.x;

    ParticleData particle = particles[index];
    vec3 pos = particle.posAndMass.xyz;
    vec3 vel = particle.velocity.xyz;

    vel += ((particle.force.xyz / particle.props.x)) * timestep;
    pos += vel * timestep;

#define BOX_EXTENT 15.f
    if (pos.y < -(BOX_EXTENT + 5.f))
    {
        pos.y = max(pos.y, -(BOX_EXTENT + 10.f));
        vel.y *= -0.3;
        //vel.y = 0.f;
    }

    if (pos.x < -BOX_EXTENT || pos.x > BOX_EXTENT)
    {
        pos.x = max(-BOX_EXTENT, min(BOX_EXTENT, pos.x));
        vel.x *= -0.3;
        //vel.x = 0.f;
    }

    if (pos.z < -(BOX_EXTENT/2.f) || pos.z > (BOX_EXTENT/2.f))
    {
        pos.z = max(-(BOX_EXTENT/2.f), min((BOX_EXTENT/2.f), pos.z));
        vel.z *= -0.3;
        //vel.z = 0.f;
    }

    particles[index].posAndMass.xyz = pos;
    particles[index].velocity.xyz = vel;
}
