#version 430
layout(local_size_x = 256) in;

struct ParticleData
{
    vec4 posAndMass;
    vec4 velocity;
    vec4 props;
    vec4 force;
};

layout(std430, binding=0) buffer Particles
{
    ParticleData particles[];
};

uniform float timestep;
uniform vec3 gravity;
uniform vec3 box;

uniform vec3 attractorPos;
uniform float attractorInnerRadius;
uniform float attractorOutterRadius;
uniform float attractorStrength;

void main()
{
    uint index = gl_GlobalInvocationID.x;

    vec3 toAttractor = attractorPos - particles[index].posAndMass.xyz;
    float dist = length(toAttractor);
    float distPow = pow(dist, 1.3f);

    if (dist < attractorOutterRadius && dist > attractorInnerRadius)
    {
        particles[index].force.xyz += normalize(toAttractor) * attractorStrength / distPow;
    }

    ParticleData particle = particles[index];
    vec3 pos = particle.posAndMass.xyz;
    vec3 vel = particle.velocity.xyz;

    //vel += ((particle.force.xyz / particle.props.x)) * timestep;
    vel += ((particle.force.xyz)) * timestep;
    pos += vel * timestep;

    if (pos.y <= 0.f || pos.y >= box.y)
    {
        pos.y = max(0.f, min(pos.y, box.y));
        vel.y *= -0.6;
    }

    if (pos.x <= 0.f || pos.x >= box.x)
    {
        pos.x = max(0.f, min(pos.x, box.x));
        vel.x *= -0.6;
    }

    if (pos.z <= 0.f || pos.z >= box.z)
    {
        pos.z = max(0.f, min(pos.z, box.z));
        vel.z *= -0.6;
    }

    particles[index].posAndMass.xyz = pos;
    particles[index].velocity.xyz = vel;
}
